import React, { useState } from 'react';
import SectionPanel from '../components/SectionPanel';
import CodeEditor from '../components/CodeEditor';
import ConsoleOutput from '../components/ConsoleOutput';
import LoadingSpinner from '../components/LoadingSpinner';
import { Indicator, GeminiRequestStatus } from '../types';
import { generatePythonCode } from '../services/geminiService';
import { useAppContext } from '../contexts/AppContext';
import { GEMINI_API_KEY_INFO_URL } from '../constants.tsx';

const DEFAULT_INDICATOR_CODE = `
# Python code for a custom trading indicator
# Example: Custom Moving Average
import pandas as pd

def custom_indicator(data_series, window=20):
    """
    Calculates a custom moving average.
    :param data_series: pandas Series of prices
    :param window: The lookback period
    :return: pandas Series with the indicator values
    """
    if not isinstance(data_series, pd.Series):
        raise ValueError("data_series must be a pandas Series")
    if len(data_series) < window:
        return pd.Series([None] * len(data_series), index=data_series.index) # Not enough data

    # Example: Weighted moving average (linearly weighted)
    weights = pd.Series(range(1, window + 1))
    weighted_ma = data_series.rolling(window=window).apply(lambda x: (x * weights).sum() / weights.sum(), raw=True)
    
    return weighted_ma

# Example Usage (for testing locally):
# prices = pd.Series([10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 22, 21, 23, 25])
# custom_ma = custom_indicator(prices, window=5)
# print(custom_ma)
`;

const MOCK_INDICATORS: Indicator[] = [
    { id: 'ind-1', name: 'Custom Weighted MA', code: DEFAULT_INDICATOR_CODE, description: 'A linearly weighted moving average.' },
    { id: 'ind-2', name: 'Volatility Channel', code: '# Code for Volatility Channel ...', description: 'Channels based on Average True Range.'},
];

const IndicatorsView: React.FC = () => {
  const { apiKeyStatus, geminiApiKey } = useAppContext(); // Added geminiApiKey
  const [indicators] = useState<Indicator[]>(MOCK_INDICATORS); // Removed setIndicators
  const [selectedIndicator, setSelectedIndicator] = useState<Indicator | null>(indicators.length > 0 ? indicators[0] : null);
  const [currentCode, setCurrentCode] = useState<string>(selectedIndicator ? selectedIndicator.code : DEFAULT_INDICATOR_CODE);
  const [geminiPrompt, setGeminiPrompt] = useState<string>('');
  const [geminiStatus, setGeminiStatus] = useState<GeminiRequestStatus>(GeminiRequestStatus.IDLE);
  const [geminiOutput, setGeminiOutput] = useState<string[]>([]);

  React.useEffect(() => {
    if (selectedIndicator) {
      setCurrentCode(selectedIndicator.code);
      setGeminiOutput([`Indicator "${selectedIndicator.name}" loaded.`]);
    } else {
      setCurrentCode(DEFAULT_INDICATOR_CODE);
       setGeminiOutput([]);
    }
  }, [selectedIndicator]);
  
  const handleGenerateIndicatorCode = async () => {
    if (apiKeyStatus === 'missing' || apiKeyStatus === 'invalid' || !geminiApiKey) { // Check for invalid too
        setGeminiOutput(prev => [...prev, `Error: Gemini API Key is ${apiKeyStatus === 'invalid' ? 'invalid' : 'missing'}. Please configure it in Settings. Get key: ${GEMINI_API_KEY_INFO_URL}`]);
        return;
    }
    if (!geminiPrompt.trim()) {
      setGeminiOutput(prev => [...prev, 'Error: Gemini prompt cannot be empty for code generation.']);
      return;
    }
    setGeminiStatus(GeminiRequestStatus.LOADING);
    setGeminiOutput(prev => [...prev, `Generating indicator code for: "${geminiPrompt}"...`]);
    try {
      const systemInstructionForIndicators = `You are an expert Python developer specializing in quantitative trading indicators.
Generate Python code for a single trading indicator function.
The function should typically take a pandas Series (e.g., price data) and parameters as input, and return a pandas Series with the indicator values.
Assume common libraries like 'pandas' and 'numpy' are available.
Only provide the raw Python code block for the indicator. Do not include \`initialize\` or \`handle_data\` functions.`;
      
      // FIX: Pass custom system instruction directly to generatePythonCode
      const code = await generatePythonCode(geminiApiKey, geminiPrompt, systemInstructionForIndicators); // Pass geminiApiKey
      
      setCurrentCode(code);
      if(selectedIndicator) {
        setSelectedIndicator(prev => prev ? {...prev, code: code} : null);
      }
      setGeminiOutput(prev => [...prev, 'Python indicator code generated by Gemini and updated in editor.']);
      setGeminiStatus(GeminiRequestStatus.SUCCESS);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      setGeminiOutput(prev => [...prev, `Error with Gemini API: ${errorMessage}`]);
      setGeminiStatus(GeminiRequestStatus.ERROR);
    }
  };


  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-full">
        <div className="lg:col-span-1 flex flex-col space-y-6">
            <SectionPanel title="My Indicators">
                 <div className="max-h-96 overflow-y-auto space-y-2 custom-scrollbar pr-2">
                    {indicators.map(ind => (
                    <div 
                        key={ind.id}
                        onClick={() => setSelectedIndicator(ind)}
                        className={`p-3 rounded-md cursor-pointer transition-colors ${selectedIndicator?.id === ind.id ? 'bg-sky-700 text-white' : 'bg-gray-700 hover:bg-gray-600'}`}
                    >
                        <h4 className="font-semibold">{ind.name}</h4>
                        <p className="text-xs text-gray-400 truncate">{ind.description}</p>
                    </div>
                    ))}
                </div>
            </SectionPanel>
        </div>
        <div className="lg:col-span-2 flex flex-col space-y-6">
            <SectionPanel title={selectedIndicator ? `Editing: ${selectedIndicator.name}` : "Indicator Code Editor"}>
              <CodeEditor code={currentCode} setCode={setCurrentCode} height="calc(100vh - 450px)" />
            </SectionPanel>
             <SectionPanel title="Gemini: Generate Indicator Code">
                {(apiKeyStatus === 'missing' || apiKeyStatus === 'invalid') && ( // Show for missing or invalid
                    <div className="mb-4 p-3 bg-red-800 border border-red-700 rounded-md text-yellow-200 text-sm">
                        Gemini API Key is {apiKeyStatus === 'invalid' ? 'invalid' : 'missing'}. AI features are disabled. 
                        <a href={GEMINI_API_KEY_INFO_URL} target="_blank" rel="noopener noreferrer" className="underline hover:text-yellow-100 ml-1">Get a key</a>.
                    </div>
                )}
                <textarea
                value={geminiPrompt}
                onChange={(e) => setGeminiPrompt(e.target.value)}
                placeholder="Describe the indicator (e.g., 'A Donchian Channel indicator with a 20-period lookback')."
                className="w-full p-2 rounded-md bg-gray-700 text-gray-200 border border-gray-600 focus:ring-sky-500 focus:border-sky-500 resize-none mb-2"
                rows={2}
                disabled={apiKeyStatus === 'missing' || apiKeyStatus === 'invalid'}
                />
                <button
                    onClick={handleGenerateIndicatorCode}
                    disabled={geminiStatus === GeminiRequestStatus.LOADING || apiKeyStatus === 'missing' || apiKeyStatus === 'invalid'}
                    className="w-full bg-sky-600 hover:bg-sky-500 text-white font-semibold py-2 px-4 rounded-md transition duration-150 ease-in-out disabled:opacity-50"
                >
                    {geminiStatus === GeminiRequestStatus.LOADING ? <LoadingSpinner size="sm" /> : 'Generate Indicator Code'}
                </button>
                {geminiStatus === GeminiRequestStatus.LOADING && <LoadingSpinner message="Gemini is crafting your indicator..." />}
                <ConsoleOutput lines={geminiOutput} title="Gemini Output" height="100px" className="mt-3"/>
            </SectionPanel>
        </div>
    </div>
  );
};

export default IndicatorsView;
